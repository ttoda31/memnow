#!/usr/bin/env python3
import argparse
import subprocess
import sys
from io import StringIO

import pandas as pd


def parse_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--all", "-a", action="store_true", help="show all lines")
    limit_help_text = "limit shown lines to N (default: 5)\n"
    limit_help_text += "0 or negative N means no limit\n"
    limit_help_text += "if '--all' is set, '--limit' will be ignored"
    parser.add_argument("--limit", "-l", type=int, default=5, metavar="N", help=limit_help_text)
    parser.add_argument("--user-filter", "-u", default="", metavar="USER", help="show only specified user")
    parser.add_argument("--users", "-U", action="store_true", help="show by users")
    verbose_help_text = "verbose\n"
    verbose_help_text += "full commands are shown"
    parser.add_argument("--verbose", "-v", action="store_true", help=verbose_help_text)
    args = parser.parse_args()
    return args


def memnow():
    args = parse_args()

    df = smem_as_dataframe(args.users, args.user_filter)
    is_limited = not args.all and args.limit > 0 and len(df) - 1 > args.limit
    if is_limited:
        totals = df[-1:]
        df = df[: args.limit]

    if args.users:
        columns = ["User", "USS", "PSS", "RSS", "Swap", "Count"]
    else:
        df["Command"] = df["PID"].map(read_command)
        columns = ["PID", "User", "USS", "PSS", "RSS", "Swap", "Name", "Command"]

    if is_limited:
        dots = pd.DataFrame([["..."] * len(columns)], columns=columns)
        df = pd.concat([df, dots, totals], ignore_index=True)

    df = df[columns].fillna("")

    limit_info = f"(Top {args.limit} results)" if is_limited else "(All results)"
    output = make_output_text(df, footer=limit_info, verbose=args.verbose)

    print(output, flush=True)
    sys.exit(0)


def smem_as_dataframe(users, user_filter):
    """`smem`コマンド結果をDataFrameで取得

    参考:
        $ sudo smem -u
        User     Count     Swap      USS      PSS      RSS
        colord       1     1612        4        4        8
        nginx        5    26192       20       20       40
        gearmand     1     1228       32       32       44
        ...
        $ sudo smem -c "pid user swap uss pss rss name"
         PID User         Swap      USS      PSS      RSS Name
         907 root         1124     1264     1368     2528 vmtoolsd
        5487 root         1364      892     1370     6544 winbindd
        5500 root         1336      912     1390     6576 winbindd
        ...
    """
    cmd = ["smem", "-s", "uss", "-r", "-k", "-t"]
    if users:
        options = ["-u", "-c", "count swap uss pss rss user"]
    else:
        options = ["-c", "pid user swap uss pss rss name"]
        if user_filter:
            options += ["-U", user_filter]

    stdout = _run_cmd(cmd + options)

    line_break = "[LINE_BREAK]"
    stdout = stdout.replace("\n", line_break)  # 改行文字を置換（次行の`split`で改行コード"\n"も消えてしまうため）
    stdout = " ".join(stdout.split())  # 複数空白を空白1つに変換
    stdout = stdout.replace(line_break, "\n")  # 改行文字を復元

    df = pd.read_csv(StringIO(stdout), delim_whitespace=True)
    df = df.drop(index=len(df) - 2)  # totalsオプションによる区切り線行を削除
    return df.reset_index()


def read_command(pid):
    return _run_cmd(["cat", f"/proc/{pid}/cmdline"])


def make_output_text(df, footer="", verbose=False):
    # Command列の処理
    has_commands = "Command" in df.columns.tolist()
    if has_commands:
        df["Command"] = df["Command"].str.strip()
        if verbose:
            commands = df["Command"]
            del df["Command"]
        else:
            is_too_long = df["Command"].str.len() >= 40
            too_long = df[is_too_long]["Command"]
            df.loc[is_too_long, "Command"] = too_long.str.slice(stop=19) + "..." + too_long.str.slice(start=-18)

    # 出力文字列のベースとしてDataFrameを文字列化
    output = df.to_string(index=False)
    width = len(output.split("\n", 1)[0])  # 1行目から幅を取得

    # verbose（full command）表示処理
    if has_commands and verbose:
        width_cm = width - 4
        indent = " " * 4

        dots = "." * width_cm
        commands = commands.iloc[:-1]  # totals行を削除
        commands = commands[commands != "..."]  # limit行を削除
        commands = commands.str.split(f"({dots})")
        commands = commands[commands.str.len() > 0]
        commands = commands.str.join("\n")
        commands = commands.str.strip()
        commands = commands.str.replace("\n\n", "\n")
        commands = indent + commands
        commands = commands.str.replace("\n", f"\n{indent}")

        output = output.split("\n")
        [output.insert(idx + 2, commands[idx]) for idx in reversed(range(commands.size))]
        output = "\n".join(output)

    # 先頭行と末尾行に区切り線を挿入
    separator = "=" * width  # 区切り線文字列の作成
    output = output.replace("\n", f"\n{separator}\n", 1)  # 先頭行
    # Note: replace()は文字列先頭からのみ処理 -> 文字列全体をスライス[::-1]で一旦反転して処理
    output = output[::-1].replace("\n", f"\n{separator}\n", 1)[::-1]  # 末尾行

    # footerを追加（右寄せ）
    if footer:
        output += "\n" + footer.rjust(width)

    return output


def _run_cmd(cmd):
    try:
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except OSError as e:
        print(e.strerror, file=sys.stderr)
        if e.errno == 2:  # FileNotFoundError
            print("Please install 'smem' or set PATH correctly", file=sys.stderr)
        sys.exit(1)
    stdout, _ = p.communicate()
    stdout = stdout.replace(b"\x00", b" ")  # NULL文字を変換
    return stdout.decode("utf-8")


if __name__ == "__main__":
    memnow()

#!/usr/bin/env python3
import argparse
import subprocess
from io import StringIO

import pandas as pd


def parse_args():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("--users", "-u", action="store_true", help="show by users")
    parser.add_argument("--all", "-a", action="store_true", help="show all lines")
    limit_help_text = "limit shown lines to N (default: 5)\n"
    limit_help_text += "0 or negative N means no limit\n"
    limit_help_text += "if '--all' is set, '--limit' will be ignored"
    parser.add_argument("--limit", "-l", type=int, default=5, metavar="N", help=limit_help_text)
    parser.add_argument("--user-filter", "-uf", default="", metavar="USER", help="show only specified user")
    args = parser.parse_args()
    return args.users, args.user_filter, args.limit


def memnow():
    users, user_filter, limit = parse_args()

    df = smem_as_dataframe(users, user_filter)
    is_limited = limit > 0 and len(df) - 1 > limit
    if is_limited:
        totals = df[-1:]
        df = df[:limit]

    if users:
        columns = ["User", "USS", "PSS", "RSS", "Swap", "Count"]
    else:
        _get_command = lambda pid: _run_cmd(["cat", f"/proc/{pid}/cmdline"])
        df["Command"] = df["PID"].map(_get_command)
        is_too_long = df["Command"].str.len() >= 60
        too_long = df[is_too_long]["Command"]
        df.loc[is_too_long, "Command"] = too_long.str.slice(stop=27) + "..." + too_long.str.slice(start=-27)
        columns = ["PID", "User", "USS", "PSS", "RSS", "Swap", "Name", "Command"]

    if is_limited:
        dots = pd.DataFrame([["..."] * len(columns)], columns=columns)
        df = pd.concat([df, dots, totals], ignore_index=True)

    df = df[columns].fillna("")

    output = df.to_string(index=False)
    header = output.split("\n", 1)[0]
    separator = "-" * len(header)  # 先頭行の長さを基に区切り線を作成
    output = output.replace("\n", f"\n{separator}\n", 1)  # 先頭行区切り線の挿入
    # 末尾行区切り線の挿入
    # Note: replace()は文字列先頭からのみ処理 -> 文字列をスライス[::-1]で一旦反転
    output = output[::-1].replace("\n", f"\n{separator}\n", 1)[::-1]

    limit_info = f"(Top {limit} results)" if is_limited else "(All results)"
    output += "\n" + limit_info.rjust(len(header))

    print(output, flush=True)


def smem_as_dataframe(users, user_filter):
    """`smem`コマンド結果をDataFrameで取得

    参考:
        $ sudo smem -u
        User     Count     Swap      USS      PSS      RSS
        colord       1     1612        4        4        8
        nginx        5    26192       20       20       40
        gearmand     1     1228       32       32       44
        ...
        $ sudo smem -c "pid user swap uss pss rss name"
         PID User         Swap      USS      PSS      RSS Name
         907 root         1124     1264     1368     2528 vmtoolsd
        5487 root         1364      892     1370     6544 winbindd
        5500 root         1336      912     1390     6576 winbindd
        ...
    """
    cmd = ["sudo", "smem", "-s", "uss", "-r", "-k", "-t"]
    if users:
        options = ["-u", "-c", "count swap uss pss rss user"]
    else:
        options = ["-c", "pid user swap uss pss rss name"]
        if user_filter:
            options += ["-U", user_filter]

    stdout = _run_cmd(cmd + options)

    line_break = "[LINE_BREAK]"
    stdout = stdout.replace("\n", line_break)  # 改行文字を置換（次行の`split`で改行コード"\n"も消えてしまうため）
    stdout = " ".join(stdout.split())  # 複数空白を空白1つに変換
    stdout = stdout.replace(line_break, "\n")  # 改行文字を復元

    df = pd.read_csv(StringIO(stdout), delim_whitespace=True)
    df = df.drop(index=len(df) - 2)  # totalsオプションによる区切り線行を削除
    return df.reset_index()


def _run_cmd(cmd):
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, _ = p.communicate()
    stdout = stdout.replace(b"\x00", b"")  # NULL文字を削除
    return stdout.decode("utf-8")


if __name__ == "__main__":
    memnow()
